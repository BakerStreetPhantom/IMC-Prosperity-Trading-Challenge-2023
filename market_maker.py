from typing import Dict, List
from datamodel import OrderDepth, TradingState, Order
import numpy 
import math
import statistics
class Trader:
    p_mid = [10000]
    p_spread = []
    b_mid = []
    b_spread = []
    c_mid = [8000]
    c_spread = []
    pc_mid = [15000]
    pc_spread = []
    ber_mid = []
    ber_spread = []
    pb_mid = [74000]
    pb_spread = []
    uku_mid = [20000]
    uku_spread = []
    bag_mid = [12500]
    bag_spread = []
    dip_mid = [7100]
    dip_spread = []
    dg_time = [(-100, 'INITIAL')]
    dolphins = []
    # testing dg_mids
    # dg_mids = [100554, 100554, 100550, 100538, 100537, 100530, 100526, 100512, 100500, 100500, 100502, 100514, 100522, 100515, 100520, 100518, 100507, 100510, 100505, 100498, 100491, 100490, 100488, 100485, 100484, 100488, 100484, 100480, 100480, 100482, 100486, 100495, 100479, 100485, 100487, 100494, 100488, 100489, 100497, 100507, 100514, 100516, 100510, 100509, 100497, 100494, 100486, 100484, 100481, 100484, 100488, 100490, 100493, 100495, 100504, 100503, 100500, 100494, 100494, 100499, 100510, 100508, 100513, 100512, 100517, 100509, 100512, 100516, 100504, 100503, 100497, 100497, 100499, 100500, 100504, 100506, 100509, 100508, 100512, 100504, 100509, 100505, 100503, 100504, 100506, 100512, 100509, 100511, 100504, 100496, 100505, 100504, 100509, 100509, 100501, 100506, 100511, 100517, 100526, 100525, 100526, 100522, 100520, 100515, 100510, 100506, 100507, 100502, 100498, 100493, 100484, 100479, 100478, 100480, 100486, 100491, 100490, 100487, 100486, 100485, 100478, 100481, 100481, 100479, 100473, 100481, 100491, 100484, 100495, 100493, 100497, 100487, 100487, 100493, 100493, 100499, 100501, 100507, 100520, 100514, 100515, 100509, 100497, 100490, 100493, 100498, 100502, 100503, 100502, 100497, 100497, 100495, 100481, 100488, 100484, 100475, 100479, 100481, 100492, 100488, 100482, 100489, 100486, 100493, 100496, 100486, 100478, 100470, 100478, 100482, 100486, 100477, 100479, 100456, 100456, 100456, 100462, 100465, 100458, 100458, 100450, 100447, 100443, 100460, 100455, 100452, 100452, 100464, 100457, 100464, 100470, 100464, 100461, 100473, 100460, 100450, 100437, 100431, 100430, 100423, 100425, 100426, 100429, 100428, 100426, 100421, 100428, 100429, 100435, 100429, 100430, 100429, 100421, 100418, 100407, 100401, 100414, 100414, 100405, 100409, 100416, 100428, 100431, 100437, 100438, 100432, 100433, 100431, 100423, 100434, 100432, 100426, 100423, 100429, 100427, 100423, 100431, 100426, 100430, 100430, 100427, 100433, 100438, 100442, 100442, 100441, 100420, 100418, 100416, 100422, 100437, 100437, 100453, 100452, 100459, 100467, 100455, 100466, 100459, 100458, 100452, 100447, 100440, 100437, 100446, 100438, 100445, 100448, 100453, 100456, 100461, 100466, 100459, 100449, 100455, 100459, 100469, 100469, 100468, 100462, 100449, 100451, 100461, 100460, 100465, 100470, 100460, 100461, 100454, 100455, 100459, 100457, 100456, 100463, 100476, 100470, 100467, 100462, 100455, 100458, 100454, 100461, 100469, 100468, 100461, 100461, 100461, 100456, 100464, 100463, 100456, 100460, 100450, 100457, 100455, 100464, 100465, 100455, 100450, 100452, 100448, 100447, 100450, 100440, 100437, 100429, 100429, 100433, 100432, 100425, 100421, 100417, 100419, 100422, 100423, 100427, 100421, 100413, 100403, 100408, 100408, 100402, 100405, 100402, 100398, 100392, 100392, 100394, 100394, 100392, 100390, 100389, 100386, 100369, 100365, 100362, 100363, 100359, 100357, 100354, 100347, 100336, 100332, 100331, 100332, 100339, 100347, 100347, 100348, 100344, 100344, 100337, 100333, 100333, 100337, 100332, 100328, 100334, 100331, 100333, 100338, 100338, 100335, 100343, 100340, 100341, 100335, 100345, 100342, 100351, 100349, 100347, 100338, 100330, 100330, 100335, 100330, 100329, 100334, 100333, 100329, 100329, 100328, 100325, 100329, 100317, 100326, 100327, 100320, 100322, 100322, 100328, 100333, 100332, 100335, 100344, 100353, 100356, 100356, 100351, 100353, 100357, 100358, 100346, 100343, 100339, 100340, 100338, 100337, 100336, 100340, 100335, 100336, 100330, 100334, 100336, 100337, 100342, 100345, 100352, 100344, 100344, 100339, 100348, 100350, 100349, 100354, 100353, 100354, 100352, 100359, 100359, 100367, 100362, 100362, 100357, 100362, 100361, 100355, 100359, 100365, 100364, 100360, 100362, 100372, 100366, 100356, 100355, 100347, 100337, 100338, 100341, 100346, 100348, 100352, 100352, 100361, 100359, 100355, 100365, 100369, 100368, 100369, 100366, 100361, 100350, 100339, 100342, 100339, 100335, 100332, 100335, 100344, 100343, 100338, 100334, 100333, 100336, 100337, 100342, 100334, 100335, 100346, 100348, 100347, 100349, 100354, 100356, 100363, 100353, 100355, 100357, 100359, 100359, 100358, 100361, 100353, 100350, 100348, 100350, 100350, 100346, 100351, 100353, 100353, 100356, 100357, 100365, 100364, 100358, 100360, 100363, 100368, 100372, 100371, 100381, 100377, 100373, 100377, 100373, 100381, 100375, 100376, 100378, 100375, 100364, 100366, 100368, 100367, 100365, 100357, 100353, 100342, 100352, 100350, 100358, 100357, 100366, 100363, 100358, 100354, 100354, 100349, 100341, 100350, 100358, 100354, 100359, 100345, 100347, 100359, 100371, 100375, 100382, 100384, 100393, 100391, 100377, 100384, 100385, 100385, 100389, 100394, 100386, 100387, 100383, 100381, 100389, 100388, 100385, 100386, 100385, 100385, 100391, 100392, 100389, 100388, 100382, 100391, 100395, 100384, 100384, 100391, 100381, 100380, 100391, 100393, 100398, 100393, 100402, 100406, 100415, 100409, 100406, 100401, 100403, 100398, 100399, 100408, 100413, 100410, 100413, 100407, 100413, 100406, 100410, 100417, 100409, 100415, 100424, 100433, 100442, 100447, 100452, 100449, 100461, 100462, 100469, 100473, 100474, 100468, 100473, 100474, 100469, 100480, 100483, 100481, 100478, 100487, 100486, 100484, 100473, 100473, 100470, 100476, 100485, 100493, 100484, 100487, 100497, 100496, 100496, 100496, 100489, 100487, 100487, 100489, 100491, 100492, 100490, 100503, 100511, 100517, 100519, 100529, 100525, 100531, 100537, 100537, 100528, 100519, 100528, 100522, 100528, 100528, 100526, 100529, 100538, 100544, 100552, 100547, 100545, 100553, 100554, 100553, 100545, 100543, 100541, 100545, 100545, 100536, 100525, 100532, 100525, 100516, 100509, 100506, 100509, 100509, 100506, 100504, 100499, 100498, 100495, 100496, 100490, 100488, 100490, 100485, 100482, 100486, 100485, 100484, 100483, 100484, 100468, 100470, 100469, 100480, 100471, 100479, 100479, 100477, 100478, 100478, 100470, 100472, 100476, 100469, 100474, 100474, 100478, 100481, 100482, 100493, 100493, 100484, 100489, 100479, 100479, 100478, 100464, 100454, 100467, 100462, 100448, 100441, 100438, 100443, 100433, 100432, 100431, 100429, 100435, 100433, 100420, 100418, 100413, 100411, 100413, 100398, 100397, 100398, 100390, 100378, 100385, 100390, 100380, 100375, 100369, 100367, 100359, 100362, 100362, 100367, 100367, 100376, 100369, 100373, 100377, 100376, 100378, 100376, 100367, 100366, 100371, 100357, 100366, 100358, 100361, 100354, 100358, 100353, 100354, 100354, 100354, 100356, 100356, 100353, 100361, 100358, 100358, 100361, 100356, 100353, 100354, 100354, 100352, 100350, 100351, 100354, 100346, 100340, 100340, 100341, 100345, 100348, 100344, 100338, 100340, 100335, 100329, 100334, 100329, 100327, 100327, 100313, 100329, 100337, 100348, 100347, 100348, 100353, 100354, 100355, 100352, 100347, 100354, 100357, 100358, 100354, 100368, 100365, 100353, 100355, 100341, 100349, 100345, 100345, 100345, 100343, 100334, 100337, 100338, 100333, 100337, 100341, 100335, 100335, 100324, 100308, 100313, 100313, 100320, 100321, 100322, 100325, 100328, 100332, 100325, 100327, 100314, 100316, 100329, 100341, 100350, 100346, 100350, 100345, 100351, 100349, 100346, 100348, 100354, 100345, 100344, 100345, 100346, 100341, 100341, 100337, 100342, 100344, 100354, 100350, 100345, 100347, 100354, 100355, 100354, 100343, 100341, 100343, 100349, 100341, 100344, 100346, 100359, 100367, 100357, 100354, 100353, 100348, 100345, 100337, 100334, 100329, 100327, 100324, 100325, 100325, 100325, 100324, 100316, 100314, 100322, 100321, 100322, 100325, 100325, 100321, 100319, 100313, 100307, 100307, 100303, 100297, 100298, 100301, 100300, 100297, 100308, 100308, 100305, 100311, 100320, 100312, 100305, 100303, 100307, 100300, 100307, 100309, 100319, 100320, 100323, 100328, 100325, 100318, 100316, 100307, 100299, 100298, 100300, 100306, 100314, 100309, 100301, 100309, 100310, 100311, 100302, 100295, 100299, 100295, 100302, 100296, 100304, 100296, 100287, 100285, 100280, 100276, 100279, 100283, 100276, 100281, 100289, 100296, 100296]
    
    # submit dg_mids
    dg_mids = [100513, 100507, 100512, 100515, 100503, 100514, 100521, 100525, 100530, 100526, 100532, 100539, 100548, 100546, 100543, 100556, 100557, 100547, 100542, 100543, 100550, 100543, 100541, 100537, 100536, 100531, 100536, 100531, 100530, 100533, 100530, 100531, 100528, 100538, 100534, 100536, 100533, 100530, 100522, 100522, 100521, 100522, 100522, 100517, 100513, 100505, 100507, 100512, 100511, 100507, 100520, 100518, 100524, 100519, 100518, 100511, 100511, 100509, 100509, 100511, 100505, 100517, 100512, 100514, 100521, 100524, 100521, 100517, 100515, 100498, 100503, 100513, 100520, 100532, 100528, 100528, 100529, 100533, 100531, 100519, 100521, 100532, 100524, 100512, 100515, 100507, 100508, 100511, 100506, 100499, 100500, 100496, 100498, 100500, 100506, 100510, 100514, 100501, 100497, 100511, 100514, 100510, 100508, 100519, 100523, 100524, 100523, 100522, 100534, 100526, 100528, 100516, 100524, 100527, 100531, 100525, 100519, 100522, 100522, 100524, 100521, 100519, 100515, 100507, 100504, 100491, 100496, 100496, 100501, 100501, 100487, 100492, 100499, 100492, 100484, 100493, 100488, 100488, 100481, 100482, 100479, 100488, 100490, 100475, 100467, 100468, 100469, 100460, 100460, 100466, 100469, 100461, 100464, 100471, 100467, 100459, 100466, 100471, 100469, 100465, 100471, 100473, 100479, 100479, 100472, 100470, 100475, 100475, 100472, 100469, 100477, 100481, 100483, 100480, 100468, 100471, 100457, 100464, 100474, 100479, 100476, 100479, 100475, 100469, 100468, 100470, 100488, 100490, 100494, 100487, 100489, 100494, 100500, 100503, 100498, 100510, 100513, 100524, 100528, 100537, 100527, 100522, 100525, 100530, 100526, 100515, 100525, 100519, 100526, 100539, 100537, 100531, 100530, 100537, 100529, 100531, 100524, 100515, 100507, 100505, 100497, 100498, 100490, 100484, 100474, 100477, 100472, 100472, 100477, 100477, 100476, 100473, 100465, 100469, 100468, 100456, 100452, 100459, 100462, 100464, 100470, 100459, 100456, 100453, 100452, 100458, 100456, 100447, 100444, 100440, 100455, 100461, 100469, 100480, 100481, 100488, 100493, 100496, 100490, 100502, 100503, 100503, 100508, 100511, 100520, 100516, 100503, 100494, 100494, 100497, 100509, 100505, 100506, 100501, 100504, 100512, 100519, 100515, 100509, 100503, 100505, 100495, 100504, 100511, 100517, 100514, 100517, 100528, 100530, 100536, 100540, 100551, 100550, 100534, 100538, 100535, 100527, 100523, 100519, 100521, 100525, 100519, 100513, 100520, 100513, 100518, 100517, 100511, 100513, 100511, 100494, 100494, 100485, 100479, 100461, 100469, 100470, 100465, 100469, 100469, 100467, 100462, 100461, 100463, 100468, 100466, 100466, 100470, 100476, 100479, 100476, 100478, 100478, 100485, 100480, 100484, 100486, 100485, 100487, 100484, 100476, 100487, 100495, 100494, 100504, 100510, 100506, 100509, 100510, 100507, 100505, 100507, 100511, 100513, 100512, 100505, 100501, 100505, 100504, 100503, 100500, 100501, 100494, 100491, 100482, 100493, 100496, 100492, 100492, 100497, 100510, 100516, 100509, 100512, 100519, 100521, 100511, 100503, 100518, 100520, 100514, 100507, 100496, 100493, 100488, 100483, 100493, 100505, 100502, 100488, 100479, 100482, 100490, 100483, 100480, 100479, 100485, 100487, 100486, 100479, 100484, 100486, 100479, 100469, 100482, 100470, 100472, 100468, 100463, 100462, 100472, 100474, 100471, 100481, 100473, 100479, 100485, 100485, 100486, 100491, 100502, 100509, 100506, 100503, 100499, 100491, 100487, 100481, 100475, 100478, 100480, 100482, 100485, 100489, 100490, 100494, 100484, 100485, 100483, 100489, 100489, 100482, 100490, 100487, 100492, 100496, 100500, 100506, 100501, 100493, 100491, 100480, 100486, 100488, 100486, 100480, 100470, 100479, 100483, 100477, 100472, 100480, 100482, 100480, 100482, 100483, 100475, 100485, 100491, 100492, 100481, 100485, 100482, 100485, 100488, 100480, 100482, 100480, 100475, 100479, 100478, 100485, 100488, 100481, 100482, 100477, 100479, 100479, 100486, 100485, 100477, 100474, 100469, 100456, 100450, 100458, 100448, 100451, 100447, 100450, 100451, 100449, 100438, 100431, 100426, 100438, 100448, 100439, 100439, 100429, 100427, 100436, 100442, 100444, 100433, 100427, 100420, 100434, 100433, 100441, 100443, 100442, 100438, 100447, 100446, 100449, 100449, 100444, 100449, 100443, 100444, 100438, 100426, 100432, 100438, 100438, 100428, 100420, 100422, 100413, 100431, 100425, 100422, 100430, 100435, 100439, 100444, 100450, 100451, 100449, 100448, 100450, 100452, 100459, 100463, 100469, 100467, 100463, 100459, 100458, 100450, 100446, 100448, 100445, 100438, 100430, 100424, 100418, 100428, 100437, 100448, 100446, 100440, 100436, 100428, 100428, 100423, 100429, 100423, 100424, 100407, 100404, 100404, 100404, 100400, 100400, 100401, 100401, 100410, 100408, 100413, 100422, 100428, 100432, 100435, 100443, 100452, 100448, 100448, 100458, 100461, 100454, 100455, 100460, 100464, 100464, 100464, 100462, 100456, 100459, 100461, 100457, 100453, 100449, 100447, 100458, 100459, 100463, 100464, 100465, 100464, 100454, 100461, 100466, 100470, 100473, 100480, 100478, 100483, 100499, 100509, 100512, 100503, 100488, 100485, 100489, 100487, 100490, 100494, 100501, 100510, 100513, 100511, 100510, 100506, 100525, 100531, 100537, 100529, 100523, 100525, 100530, 100535, 100545, 100549, 100549, 100549, 100555, 100563, 100572, 100577, 100592, 100590, 100593, 100589, 100588, 100600, 100594, 100594, 100593, 100595, 100600, 100596, 100593, 100590, 100584, 100584, 100581, 100578, 100572, 100564, 100557, 100550, 100544, 100536, 100529, 100540, 100533, 100537, 100555, 100563, 100567, 100566, 100580, 100580, 100581, 100571, 100573, 100577, 100566, 100569, 100572, 100574, 100567, 100565, 100573, 100578, 100570, 100572, 100561, 100565, 100574, 100588, 100585, 100586, 100585, 100580, 100575, 100578, 100575, 100574, 100571, 100568, 100562, 100559, 100566, 100574, 100587, 100577, 100569, 100575, 100579, 100575, 100579, 100580, 100571, 100574, 100576, 100576, 100578, 100568, 100574, 100574, 100583, 100585, 100587, 100583, 100575, 100578, 100572, 100575, 100574, 100561, 100564, 100570, 100565, 100559, 100560, 100557, 100557, 100549, 100546, 100543, 100541, 100549, 100544, 100534, 100527, 100521, 100524, 100532, 100533, 100539, 100534, 100540, 100539, 100539, 100536, 100535, 100541, 100538, 100541, 100540, 100537, 100537, 100524, 100526, 100528, 100520, 100519, 100519, 100512, 100513, 100517, 100522, 100522, 100532, 100538, 100534, 100535, 100545, 100549, 100548, 100553, 100554, 100551, 100547, 100545, 100533, 100531, 100525, 100523, 100521, 100523, 100522, 100520, 100521, 100522, 100519, 100515, 100515, 100516, 100519, 100509, 100504, 100501, 100491, 100491, 100496, 100490, 100485, 100492, 100488, 100486, 100486, 100485, 100488, 100490, 100482, 100486, 100487, 100495, 100498, 100495, 100501, 100500, 100496, 100496, 100496, 100493, 100493, 100488, 100484, 100494, 100486, 100492, 100493, 100485, 100481, 100469, 100464, 100471, 100455, 100458, 100457, 100450, 100446, 100453, 100449, 100449, 100443, 100440, 100441, 100445, 100436, 100441, 100446, 100443, 100446, 100441, 100445, 100446, 100445, 100450, 100455, 100456, 100455, 100461, 100460, 100474, 100459, 100465, 100473, 100473, 100462, 100466, 100466, 100470, 100478, 100478, 100476, 100481, 100477, 100474, 100475, 100476, 100482, 100490, 100491, 100486, 100499, 100513, 100519, 100510, 100500, 100502, 100493, 100497, 100500, 100504, 100505, 100503, 100496, 100485, 100495, 100500, 100489, 100491, 100488, 100492, 100495, 100506, 100499, 100495, 100504, 100501, 100507, 100514, 100513, 100512, 100517, 100510, 100498, 100500, 100492, 100490, 100496, 100503, 100514, 100517, 100519, 100514, 100509, 100491, 100500, 100497, 100492, 100484, 100481, 100478, 100472, 100473, 100470, 100468, 100456, 100449, 100455, 100451, 100439, 100431, 100438, 100443, 100442, 100446, 100442, 100445, 100446, 100442, 100438, 100439, 100429, 100435, 100437, 100427, 100417, 100404, 100397, 100397, 100386, 100379, 100376, 100374, 100372, 100367, 100376, 100371, 100375, 100367, 100369, 100379]
    dg_count = [0, 0, 0]
    # dg_mids = []

    def run(self, state: TradingState) -> Dict[str, List[Order]]:

        result = {}

        for product in state.order_depths.keys():

            if product == 'PEARLS':
                limit = 20

                D = {(9996.0, 10004.0): [2955, 2860], (9996.0, 9998.0): [379, 2417], (9996.0, 10002.0): [631, 1318], (9996.0, 10000.0): [177, 154], (10000.0, 10004.0): [139, 77], (10000.0, 10005.0): [65, 25], (10000.0, 10002.0): [44, 37], (9995.0, 10005.0): [1932, 1869], (9995.0, 9998.0): [294, 1280], (9995.0, 10002.0): [457, 624], (9995.0, 10000.0): [27, 80], (9998.0, 10004.0): [1413, 762], (9998.0, 10005.0): [673, 456], (9998.0, 10000.0): [46, 47], (10002.0, 10004.0): [2482, 353], (10002.0, 10005.0): [1303, 221]}


                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []

                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.p_mid.append((bid_vwap+ask_vwap)/2)
                self.p_spread.append(best_ask-best_bid)

                mu = round(statistics.fmean(self.p_mid))
                spread = round(statistics.fmean(self.p_spread))

                if (best_bid,best_ask) not in D.keys():
                    orders.append(Order(product, mu + spread//2, (-q-limit)))
                    orders.append(Order(product, mu - spread//2, (limit-q)))

                else:

                    p = D[(best_bid,best_ask)][0]/(D[(best_bid,best_ask)][0] + D[(best_bid,best_ask)][1])
                    if p == 1:
                        p = 0.99
                    func = (p*(limit-q) + q)/(1-p)
                    sell_qty = math.floor(min(limit+q,max(0,func)))
                    buy_qty = math.floor(((1-p)*sell_qty - q)/p)

                    buy_qty = min(limit-q,max(0,buy_qty))
                    f = 0

                    if best_ask > mu and best_bid < mu:
                        if q < 0:
                            orders.append(Order(product, best_ask, -math.ceil(sell_qty*f)))
                            orders.append(Order(product, best_ask-1, -math.floor(sell_qty*(1-f))))
                            orders.append(Order(product, best_bid+1, math.floor(buy_qty*(1-f))))
                            orders.append(Order(product, best_bid, math.floor(buy_qty*f)))
                        if q>=0:

                            
                            orders.append(Order(product, best_ask, -math.ceil(sell_qty*f)))
                            orders.append(Order(product, best_ask-1, -math.floor(sell_qty*(1-f))))
                            orders.append(Order(product, best_bid+1, math.floor(buy_qty*(1-f))))
                            orders.append(Order(product, best_bid, math.floor(buy_qty*f)))
                    
                    elif best_bid >= mu:
                        if best_bid == mu:
                            if q >= 0:

                                orders.append(Order(product, best_bid+1, -sell_qty))
                            else:

                                orders.append(Order(product, best_bid+1, -math.ceil(sell_qty)))
                        else:

                            if q >= 0:

                                orders.append(Order(product, best_bid, -math.ceil(sell_qty*f)))
                                orders.append(Order(product, best_bid - 1, -math.floor(sell_qty*(1-f))))
                            else:

                                orders.append(Order(product, best_bid, -math.ceil(sell_qty*f)))
                                orders.append(Order(product, best_bid-1, -math.floor(sell_qty*(1-f))))
                    else:
                        if best_ask == mu:
                            if q <= 0:
                                
                                orders.append(Order(product, best_ask-1, buy_qty))
                            else:
                                orders.append(Order(product, best_ask-1, math.ceil(buy_qty)))

                        else:
                            if q <= 0:
                                
                                orders.append(Order(product, best_ask, math.ceil(buy_qty*f)))
                                orders.append(Order(product, best_ask + 1, math.ceil(buy_qty*(1-f))))
                            else:
                                orders.append(Order(product, best_ask, math.ceil(buy_qty*f)))
                                orders.append(Order(product, best_ask+1, math.floor(buy_qty*(1-f))))


                result[product] = orders

            if product == 'BANANAS':
                limit = 20

                D = {(4734.0, 4741.0): [0, 17], (4735.0, 4736.0): [0, 1], (4735.0, 4739.0): [0, 1], (4735.0, 4742.0): [11, 0], (4736.0, 4737.0): [0, 16], (4736.0, 4740.0): [0, 1], (4736.0, 4741.0): [2, 1], (4736.0, 4742.0): [3, 1], (4736.0, 4743.0): [20, 2], (4737.0, 4738.0): [0, 12], (4737.0, 4739.0): [1, 0], (4737.0, 4741.0): [2, 1], (4737.0, 4742.0): [1, 2], (4737.0, 4743.0): [48, 30], (4737.0, 4744.0): [2, 22], (4738.0, 4739.0): [0, 18], (4738.0, 4740.0): [0, 2], (4738.0, 4741.0): [5, 0], (4738.0, 4742.0): [2, 0], (4738.0, 4743.0): [2, 7], (4738.0, 4744.0): [32, 8], (4738.0, 4745.0): [1, 2], (4739.0, 4740.0): [2, 21], (4739.0, 4741.0): [15, 5], (4739.0, 4742.0): [0, 1], (4739.0, 4743.0): [0, 3], (4739.0, 4744.0): [3, 7], (4739.0, 4745.0): [61, 58], (4739.0, 4746.0): [3, 2], (4740.0, 4741.0): [14, 22], (4740.0, 4742.0): [1, 19], (4740.0, 4744.0): [1, 2], (4740.0, 4745.0): [2, 15], (4740.0, 4746.0): [32, 23], (4740.0, 4747.0): [22, 3], (4741.0, 4742.0): [1, 15], (4741.0, 4743.0): [6, 0], (4741.0, 4744.0): [0, 1], (4741.0, 4745.0): [2, 0], (4741.0, 4746.0): [4, 13], (4741.0, 4747.0): [25, 19], (4741.0, 4748.0): [14, 5], (4742.0, 4743.0): [5, 11], (4742.0, 4744.0): [13, 0], (4742.0, 4747.0): [2, 2], (4742.0, 4748.0): [7, 38], (4742.0, 4749.0): [0, 30], (4743.0, 4744.0): [5, 4], (4743.0, 4745.0): [2, 0], (4743.0, 4747.0): [0, 2], (4743.0, 4748.0): [1, 2], (4743.0, 4749.0): [4, 2], (4743.0, 4750.0): [2, 11], (4744.0, 4745.0): [12, 42], (4744.0, 4746.0): [2, 4], (4744.0, 4747.0): [0, 1], (4744.0, 4748.0): [2, 7], (4744.0, 4749.0): [1, 4], (4744.0, 4750.0): [5, 15], (4744.0, 4751.0): [11, 0], (4745.0, 4746.0): [7, 23], (4745.0, 4747.0): [25, 27], (4745.0, 4748.0): [4, 1], (4745.0, 4749.0): [10, 1], (4745.0, 4750.0): [5, 16], (4745.0, 4751.0): [13, 48], (4746.0, 4747.0): [16, 29], (4746.0, 4748.0): [8, 0], (4746.0, 4750.0): [2, 3], (4746.0, 4751.0): [3, 0], (4746.0, 4752.0): [5, 31], (4746.0, 4753.0): [1, 4], (4747.0, 4748.0): [4, 5], (4747.0, 4749.0): [3, 6], (4747.0, 4750.0): [0, 1], (4747.0, 4752.0): [1, 3], (4747.0, 4753.0): [20, 15], (4747.0, 4754.0): [4, 2], (4748.0, 4749.0): [24, 8], (4748.0, 4750.0): [12, 0], (4748.0, 4751.0): [6, 0], (4748.0, 4752.0): [2, 0], (4748.0, 4753.0): [22, 25], (4748.0, 4754.0): [45, 32], (4748.0, 4755.0): [3, 3], (4749.0, 4750.0): [18, 23], (4749.0, 4751.0): [3, 0], (4749.0, 4752.0): [4, 2], (4749.0, 4753.0): [15, 6], (4749.0, 4754.0): [4, 21], (4749.0, 4755.0): [4, 36], (4749.0, 4756.0): [3, 19], (4750.0, 4751.0): [5, 16], (4750.0, 4752.0): [32, 7], (4750.0, 4753.0): [0, 1], (4750.0, 4754.0): [2, 2], (4750.0, 4755.0): [6, 1], (4750.0, 4756.0): [21, 9], (4750.0, 4757.0): [12, 0], (4751.0, 4752.0): [4, 4], (4751.0, 4753.0): [3, 12], (4751.0, 4755.0): [18, 16], (4751.0, 4756.0): [17, 1], (4751.0, 4757.0): [11, 2], (4751.0, 4758.0): [26, 0], (4752.0, 4753.0): [2, 8], (4752.0, 4754.0): [5, 14], (4752.0, 4756.0): [2, 0], (4752.0, 4757.0): [3, 1], (4752.0, 4758.0): [21, 28], (4752.0, 4759.0): [6, 0], (4753.0, 4754.0): [17, 19], (4753.0, 4755.0): [7, 0], (4753.0, 4757.0): [3, 0], (4753.0, 4759.0): [1, 3], (4753.0, 4760.0): [3, 3], (4754.0, 4755.0): [3, 4], (4754.0, 4756.0): [11, 0], (4754.0, 4759.0): [2, 2], (4754.0, 4760.0): [4, 0], (4754.0, 4761.0): [17, 3], (4755.0, 4756.0): [3, 12], (4755.0, 4757.0): [16, 4], (4755.0, 4759.0): [1, 13], (4755.0, 4760.0): [7, 3], (4755.0, 4761.0): [6, 21], (4755.0, 4762.0): [1, 19], (4756.0, 4757.0): [9, 1], (4756.0, 4758.0): [14, 4], (4756.0, 4759.0): [0, 2], (4756.0, 4760.0): [0, 2], (4756.0, 4761.0): [2, 5], (4756.0, 4762.0): [20, 0], (4756.0, 4763.0): [20, 13], (4757.0, 4758.0): [1, 7], (4757.0, 4759.0): [6, 0], (4757.0, 4761.0): [0, 6], (4757.0, 4762.0): [8, 0], (4757.0, 4763.0): [2, 2], (4757.0, 4764.0): [6, 14], (4758.0, 4759.0): [1, 2], (4758.0, 4760.0): [2, 0], (4758.0, 4763.0): [4, 0], (4758.0, 4764.0): [22, 3], (4759.0, 4760.0): [0, 4], (4759.0, 4761.0): [3, 0], (4759.0, 4762.0): [1, 0], (4759.0, 4763.0): [0, 1], (4759.0, 4764.0): [25, 0], (4759.0, 4765.0): [2, 0], (4760.0, 4761.0): [6, 0], (4760.0, 4762.0): [2, 1], (4760.0, 4764.0): [1, 11], (4760.0, 4766.0): [2, 3], (4761.0, 4762.0): [3, 0], (4761.0, 4763.0): [1, 0], (4761.0, 4764.0): [0, 1], (4762.0, 4763.0): [1, 0], (4762.0, 4764.0): [5, 0], (4762.0, 4768.0): [1, 0], (4762.0, 4769.0): [1, 0], (4763.0, 4764.0): [11, 2], (4763.0, 4765.0): [3, 0], (4763.0, 4766.0): [3, 0], (4763.0, 4767.0): [0, 1], (4763.0, 4768.0): [0, 1], (4763.0, 4769.0): [1, 2], (4763.0, 4770.0): [1, 0], (4764.0, 4765.0): [0, 10], (4764.0, 4766.0): [1, 0], (4764.0, 4770.0): [2, 0], (4764.0, 4771.0): [9, 0], (4765.0, 4766.0): [1, 12], (4765.0, 4768.0): [0, 6], (4765.0, 4769.0): [0, 6], (4765.0, 4771.0): [11, 5], (4765.0, 4772.0): [1, 18], (4766.0, 4772.0): [0, 14], (4766.0, 4773.0): [20, 11], (4767.0, 4768.0): [1, 2], (4767.0, 4769.0): [1, 4], (4767.0, 4771.0): [0, 5], (4767.0, 4772.0): [1, 19], (4767.0, 4773.0): [1, 0], (4767.0, 4774.0): [10, 2], (4768.0, 4769.0): [0, 13], (4768.0, 4772.0): [1, 0], (4768.0, 4773.0): [2, 2], (4768.0, 4774.0): [3, 24], (4768.0, 4775.0): [1, 19], (4769.0, 4770.0): [0, 3], (4769.0, 4772.0): [2, 0], (4769.0, 4773.0): [11, 0], (4769.0, 4774.0): [1, 12], (4769.0, 4775.0): [11, 27], (4769.0, 4776.0): [1, 15], (4770.0, 4771.0): [3, 6], (4770.0, 4772.0): [1, 3], (4770.0, 4773.0): [0, 3], (4770.0, 4774.0): [2, 1], (4770.0, 4775.0): [13, 2], (4770.0, 4776.0): [12, 2], (4770.0, 4777.0): [33, 6], (4771.0, 4772.0): [1, 12], (4771.0, 4773.0): [14, 0], (4771.0, 4774.0): [1, 1], (4771.0, 4775.0): [0, 1], (4771.0, 4776.0): [11, 1], (4771.0, 4777.0): [31, 20], (4771.0, 4778.0): [19, 2], (4772.0, 4773.0): [7, 11], (4772.0, 4774.0): [2, 8], (4772.0, 4775.0): [1, 5], (4772.0, 4776.0): [6, 0], (4772.0, 4777.0): [7, 1], (4772.0, 4778.0): [27, 17], (4772.0, 4779.0): [13, 40], (4773.0, 4774.0): [1, 36], (4773.0, 4775.0): [18, 0], (4773.0, 4776.0): [3, 0], (4773.0, 4777.0): [0, 6], (4773.0, 4778.0): [9, 18], (4773.0, 4779.0): [35, 26], (4773.0, 4780.0): [17, 13], (4774.0, 4775.0): [25, 42], (4774.0, 4776.0): [2, 20], (4774.0, 4777.0): [1, 2], (4774.0, 4778.0): [4, 0], (4774.0, 4779.0): [26, 26], (4774.0, 4780.0): [81, 56], (4774.0, 4781.0): [7, 45], (4775.0, 4776.0): [16, 30], (4775.0, 4777.0): [19, 0], (4775.0, 4778.0): [1, 0], (4775.0, 4779.0): [1, 2], (4775.0, 4780.0): [41, 17], (4775.0, 4781.0): [23, 9], (4775.0, 4782.0): [4, 27], (4776.0, 4777.0): [2, 49], (4776.0, 4778.0): [1, 5], (4776.0, 4779.0): [1, 2], (4776.0, 4780.0): [15, 16], (4776.0, 4781.0): [25, 38], (4776.0, 4782.0): [42, 3], (4776.0, 4783.0): [29, 1], (4777.0, 4778.0): [29, 8], (4777.0, 4779.0): [17, 12], (4777.0, 4780.0): [0, 1], (4777.0, 4781.0): [1, 3], (4777.0, 4782.0): [3, 1], (4777.0, 4783.0): [38, 19], (4777.0, 4784.0): [4, 16], (4778.0, 4779.0): [21, 2], (4778.0, 4780.0): [42, 12], (4778.0, 4781.0): [17, 0], (4778.0, 4782.0): [1, 2], (4778.0, 4783.0): [13, 5], (4778.0, 4784.0): [39, 8], (4778.0, 4785.0): [2, 2], (4779.0, 4780.0): [19, 12], (4779.0, 4781.0): [5, 15], (4779.0, 4782.0): [1, 0], (4779.0, 4783.0): [0, 2], (4779.0, 4784.0): [32, 1], (4779.0, 4785.0): [31, 23], (4779.0, 4786.0): [2, 3], (4780.0, 4781.0): [21, 30], (4780.0, 4782.0): [18, 0], (4780.0, 4784.0): [24, 3], (4780.0, 4785.0): [2, 4], (4780.0, 4786.0): [62, 9], (4780.0, 4787.0): [10, 29], (4781.0, 4782.0): [7, 5], (4781.0, 4783.0): [5, 0], (4781.0, 4784.0): [1, 5], (4781.0, 4786.0): [21, 6], (4781.0, 4787.0): [20, 52], (4781.0, 4788.0): [3, 0], (4782.0, 4783.0): [7, 20], (4782.0, 4784.0): [27, 10], (4782.0, 4786.0): [1, 1], (4782.0, 4787.0): [6, 3], (4782.0, 4788.0): [20, 57], (4782.0, 4789.0): [4, 9], (4783.0, 4784.0): [17, 44], (4783.0, 4785.0): [39, 8], (4783.0, 4786.0): [0, 1], (4783.0, 4787.0): [2, 17], (4783.0, 4788.0): [6, 11], (4783.0, 4789.0): [48, 15], (4783.0, 4790.0): [4, 27], (4784.0, 4785.0): [5, 37], (4784.0, 4786.0): [11, 5], (4784.0, 4787.0): [16, 1], (4784.0, 4788.0): [1, 19], (4784.0, 4789.0): [39, 39], (4784.0, 4790.0): [102, 38], (4784.0, 4791.0): [12, 35], (4785.0, 4786.0): [7, 44], (4785.0, 4787.0): [7, 14], (4785.0, 4788.0): [3, 1], (4785.0, 4789.0): [3, 17], (4785.0, 4790.0): [27, 6], (4785.0, 4791.0): [68, 20], (4785.0, 4792.0): [11, 14], (4786.0, 4787.0): [5, 41], (4786.0, 4788.0): [13, 5], (4786.0, 4789.0): [0, 6], (4786.0, 4790.0): [14, 10], (4786.0, 4791.0): [32, 17], (4786.0, 4792.0): [60, 51], (4786.0, 4793.0): [9, 22], (4787.0, 4788.0): [7, 44], (4787.0, 4789.0): [4, 24], (4787.0, 4790.0): [5, 2], (4787.0, 4791.0): [4, 7], (4787.0, 4792.0): [7, 47], (4787.0, 4793.0): [60, 59], (4787.0, 4794.0): [32, 2], (4788.0, 4789.0): [44, 48], (4788.0, 4790.0): [37, 12], (4788.0, 4791.0): [7, 0], (4788.0, 4792.0): [4, 26], (4788.0, 4793.0): [8, 23], (4788.0, 4794.0): [53, 29], (4788.0, 4795.0): [8, 25], (4789.0, 4790.0): [16, 39], (4789.0, 4791.0): [25, 42], (4789.0, 4792.0): [4, 2], (4789.0, 4793.0): [13, 6], (4789.0, 4794.0): [15, 44], (4789.0, 4795.0): [78, 28], (4789.0, 4796.0): [5, 53], (4790.0, 4791.0): [8, 26], (4790.0, 4792.0): [12, 40], (4790.0, 4793.0): [6, 1], (4790.0, 4794.0): [15, 4], (4790.0, 4795.0): [31, 3], (4790.0, 4796.0): [94, 43], (4790.0, 4797.0): [16, 3], (4791.0, 4792.0): [15, 52], (4791.0, 4793.0): [24, 0], (4791.0, 4795.0): [15, 5], (4791.0, 4796.0): [9, 18], (4791.0, 4797.0): [40, 45], (4791.0, 4798.0): [19, 9], (4792.0, 4793.0): [34, 17], (4792.0, 4794.0): [12, 28], (4792.0, 4795.0): [6, 6], (4792.0, 4796.0): [2, 14], (4792.0, 4797.0): [4, 28], (4792.0, 4798.0): [43, 32], (4792.0, 4799.0): [32, 7], (4793.0, 4794.0): [21, 30], (4793.0, 4795.0): [17, 25], (4793.0, 4796.0): [2, 0], (4793.0, 4797.0): [1, 10], (4793.0, 4798.0): [10, 6], (4793.0, 4799.0): [28, 38], (4793.0, 4800.0): [21, 16], (4794.0, 4795.0): [12, 14], (4794.0, 4796.0): [35, 5], (4794.0, 4797.0): [2, 7], (4794.0, 4798.0): [9, 12], (4794.0, 4799.0): [4, 8], (4794.0, 4800.0): [34, 33], (4794.0, 4801.0): [39, 30], (4795.0, 4796.0): [15, 22], (4795.0, 4797.0): [13, 1], (4795.0, 4798.0): [14, 4], (4795.0, 4799.0): [18, 7], (4795.0, 4800.0): [0, 5], (4795.0, 4801.0): [41, 26], (4795.0, 4802.0): [5, 12], (4796.0, 4797.0): [12, 18], (4796.0, 4798.0): [22, 4], (4796.0, 4799.0): [13, 1], (4796.0, 4800.0): [11, 6], (4796.0, 4801.0): [17, 26], (4796.0, 4802.0): [18, 28], (4796.0, 4803.0): [6, 3], (4797.0, 4798.0): [28, 39], (4797.0, 4799.0): [34, 7], (4797.0, 4800.0): [5, 0], (4797.0, 4801.0): [3, 2], (4797.0, 4802.0): [2, 20], (4797.0, 4803.0): [32, 20], (4797.0, 4804.0): [27, 2], (4798.0, 4799.0): [12, 31], (4798.0, 4800.0): [37, 14], (4798.0, 4801.0): [7, 1], (4798.0, 4802.0): [23, 3], (4798.0, 4803.0): [3, 12], (4798.0, 4804.0): [25, 28], (4798.0, 4805.0): [1, 2], (4799.0, 4800.0): [32, 58], (4799.0, 4801.0): [23, 10], (4799.0, 4802.0): [2, 0], (4799.0, 4803.0): [0, 3], (4799.0, 4804.0): [27, 14], (4799.0, 4805.0): [31, 82], (4799.0, 4806.0): [25, 14], (4800.0, 4801.0): [13, 17], (4800.0, 4802.0): [38, 25], (4800.0, 4803.0): [2, 4], (4800.0, 4804.0): [21, 2], (4800.0, 4805.0): [7, 8], (4800.0, 4806.0): [8, 3], (4800.0, 4807.0): [19, 12], (4801.0, 4802.0): [19, 55], (4801.0, 4803.0): [20, 15], (4801.0, 4804.0): [0, 7], (4801.0, 4805.0): [5, 7], (4801.0, 4806.0): [11, 8], (4801.0, 4807.0): [38, 106], (4801.0, 4808.0): [52, 27], (4802.0, 4803.0): [10, 54], (4802.0, 4804.0): [20, 19], (4802.0, 4805.0): [2, 4], (4802.0, 4806.0): [5, 14], (4802.0, 4807.0): [15, 9], (4802.0, 4808.0): [115, 57], (4802.0, 4809.0): [76, 38], (4803.0, 4804.0): [8, 41], (4803.0, 4805.0): [59, 14], (4803.0, 4806.0): [3, 3], (4803.0, 4807.0): [15, 21], (4803.0, 4808.0): [21, 12], (4803.0, 4809.0): [35, 50], (4803.0, 4810.0): [17, 19], (4804.0, 4805.0): [36, 35], (4804.0, 4806.0): [38, 3], (4804.0, 4807.0): [3, 0], (4804.0, 4808.0): [4, 2], (4804.0, 4809.0): [40, 21], (4804.0, 4810.0): [93, 61], (4804.0, 4811.0): [46, 92], (4805.0, 4806.0): [27, 72], (4805.0, 4807.0): [28, 15], (4805.0, 4808.0): [20, 9], (4805.0, 4809.0): [22, 14], (4805.0, 4810.0): [19, 50], (4805.0, 4811.0): [73, 67], (4805.0, 4812.0): [30, 98], (4806.0, 4807.0): [12, 109], (4806.0, 4808.0): [33, 25], (4806.0, 4809.0): [20, 13], (4806.0, 4810.0): [4, 13], (4806.0, 4811.0): [54, 22], (4806.0, 4812.0): [107, 56], (4806.0, 4813.0): [50, 73], (4807.0, 4808.0): [32, 84], (4807.0, 4809.0): [54, 19], (4807.0, 4810.0): [18, 5], (4807.0, 4811.0): [26, 27], (4807.0, 4812.0): [49, 59], (4807.0, 4813.0): [106, 82], (4807.0, 4814.0): [79, 39], (4808.0, 4809.0): [48, 40], (4808.0, 4810.0): [52, 7], (4808.0, 4811.0): [4, 2], (4808.0, 4812.0): [11, 8], (4808.0, 4813.0): [38, 46], (4808.0, 4814.0): [107, 151], (4808.0, 4815.0): [45, 23], (4809.0, 4810.0): [27, 79], (4809.0, 4811.0): [37, 16], (4809.0, 4812.0): [7, 13], (4809.0, 4813.0): [4, 5], (4809.0, 4814.0): [25, 40], (4809.0, 4815.0): [98, 40], (4809.0, 4816.0): [32, 57], (4810.0, 4811.0): [67, 51], (4810.0, 4812.0): [95, 44], (4810.0, 4813.0): [1, 1], (4810.0, 4814.0): [12, 4], (4810.0, 4815.0): [38, 17], (4810.0, 4816.0): [104, 66], (4810.0, 4817.0): [60, 18], (4811.0, 4812.0): [30, 46], (4811.0, 4813.0): [34, 59], (4811.0, 4814.0): [1, 7], (4811.0, 4815.0): [13, 3], (4811.0, 4816.0): [63, 30], (4811.0, 4817.0): [76, 56], (4811.0, 4818.0): [21, 46], (4812.0, 4813.0): [30, 45], (4812.0, 4814.0): [63, 14], (4812.0, 4815.0): [5, 26], (4812.0, 4816.0): [2, 6], (4812.0, 4817.0): [16, 7], (4812.0, 4818.0): [44, 32], (4812.0, 4819.0): [25, 38], (4813.0, 4814.0): [52, 36], (4813.0, 4815.0): [55, 15], (4813.0, 4816.0): [1, 5], (4813.0, 4817.0): [10, 11], (4813.0, 4818.0): [30, 19], (4813.0, 4819.0): [71, 74], (4813.0, 4820.0): [4, 34], (4814.0, 4815.0): [31, 75], (4814.0, 4816.0): [16, 12], (4814.0, 4817.0): [1, 2], (4814.0, 4818.0): [14, 4], (4814.0, 4819.0): [27, 6], (4814.0, 4820.0): [67, 24], (4814.0, 4821.0): [27, 20], (4815.0, 4816.0): [51, 63], (4815.0, 4817.0): [27, 12], (4815.0, 4819.0): [11, 18], (4815.0, 4820.0): [28, 13], (4815.0, 4821.0): [53, 22], (4815.0, 4822.0): [18, 22], (4816.0, 4817.0): [31, 22], (4816.0, 4818.0): [39, 2], (4816.0, 4819.0): [2, 4], (4816.0, 4820.0): [0, 15], (4816.0, 4821.0): [6, 7], (4816.0, 4822.0): [45, 22], (4816.0, 4823.0): [17, 22], (4817.0, 4818.0): [27, 48], (4817.0, 4819.0): [15, 7], (4817.0, 4821.0): [7, 4], (4817.0, 4822.0): [19, 4], (4817.0, 4823.0): [23, 9], (4817.0, 4824.0): [50, 1], (4818.0, 4819.0): [13, 42], (4818.0, 4820.0): [59, 13], (4818.0, 4821.0): [4, 3], (4818.0, 4822.0): [5, 1], (4818.0, 4823.0): [26, 13], (4818.0, 4824.0): [60, 36], (4818.0, 4825.0): [38, 27], (4819.0, 4820.0): [10, 38], (4819.0, 4821.0): [17, 12], (4819.0, 4822.0): [2, 3], (4819.0, 4823.0): [13, 2], (4819.0, 4824.0): [2, 4], (4819.0, 4825.0): [84, 19], (4819.0, 4826.0): [43, 16], (4820.0, 4821.0): [19, 46], (4820.0, 4822.0): [15, 3], (4820.0, 4823.0): [20, 3], (4820.0, 4824.0): [2, 4], (4820.0, 4825.0): [13, 27], (4820.0, 4826.0): [20, 46], (4820.0, 4827.0): [31, 3], (4821.0, 4822.0): [23, 24], (4821.0, 4823.0): [16, 7], (4821.0, 4824.0): [5, 5], (4821.0, 4825.0): [0, 4], (4821.0, 4826.0): [5, 12], (4821.0, 4827.0): [27, 31], (4821.0, 4828.0): [14, 55], (4822.0, 4823.0): [26, 6], (4822.0, 4824.0): [28, 4], (4822.0, 4825.0): [0, 2], (4822.0, 4826.0): [0, 2], (4822.0, 4827.0): [2, 1], (4822.0, 4828.0): [30, 34], (4822.0, 4829.0): [5, 3], (4823.0, 4824.0): [23, 40], (4823.0, 4825.0): [24, 5], (4823.0, 4826.0): [0, 1], (4823.0, 4827.0): [0, 2], (4823.0, 4829.0): [3, 20], (4824.0, 4825.0): [10, 4], (4824.0, 4826.0): [21, 2], (4824.0, 4829.0): [1, 1], (4824.0, 4830.0): [23, 0], (4824.0, 4831.0): [2, 9], (4825.0, 4826.0): [7, 5], (4825.0, 4827.0): [9, 15], (4825.0, 4828.0): [1, 2], (4825.0, 4829.0): [1, 0], (4825.0, 4830.0): [2, 3], (4825.0, 4831.0): [2, 2], (4825.0, 4832.0): [13, 7], (4826.0, 4827.0): [3, 32], (4826.0, 4828.0): [1, 0], (4826.0, 4829.0): [1, 0], (4826.0, 4830.0): [0, 9], (4826.0, 4831.0): [3, 7], (4826.0, 4832.0): [16, 12], (4826.0, 4833.0): [21, 12], (4827.0, 4828.0): [8, 6], (4827.0, 4829.0): [1, 0], (4827.0, 4831.0): [0, 1], (4827.0, 4832.0): [22, 12], (4827.0, 4833.0): [8, 5], (4827.0, 4834.0): [31, 12], (4828.0, 4829.0): [4, 19], (4828.0, 4830.0): [7, 6], (4828.0, 4831.0): [1, 0], (4828.0, 4832.0): [2, 0], (4828.0, 4833.0): [15, 7], (4828.0, 4834.0): [28, 45], (4828.0, 4835.0): [12, 6], (4829.0, 4830.0): [0, 7], (4829.0, 4831.0): [6, 5], (4829.0, 4832.0): [1, 5], (4829.0, 4833.0): [3, 1], (4829.0, 4834.0): [14, 5], (4829.0, 4835.0): [30, 47], (4829.0, 4836.0): [6, 33], (4830.0, 4831.0): [2, 23], (4830.0, 4832.0): [17, 13], (4830.0, 4834.0): [31, 10], (4830.0, 4835.0): [14, 19], (4830.0, 4836.0): [37, 22], (4830.0, 4837.0): [42, 22], (4831.0, 4832.0): [14, 28], (4831.0, 4833.0): [32, 14], (4831.0, 4834.0): [11, 3], (4831.0, 4835.0): [2, 3], (4831.0, 4836.0): [25, 14], (4831.0, 4837.0): [32, 43], (4831.0, 4838.0): [28, 14], (4832.0, 4833.0): [23, 24], (4832.0, 4834.0): [9, 1], (4832.0, 4835.0): [0, 1], (4832.0, 4836.0): [2, 2], (4832.0, 4837.0): [29, 2], (4832.0, 4838.0): [39, 4], (4832.0, 4839.0): [27, 4], (4833.0, 4834.0): [4, 0], (4833.0, 4835.0): [28, 6], (4833.0, 4836.0): [2, 0], (4833.0, 4837.0): [0, 2], (4833.0, 4838.0): [1, 0], (4833.0, 4839.0): [11, 4], (4833.0, 4840.0): [20, 18], (4834.0, 4835.0): [18, 12], (4834.0, 4836.0): [10, 1], (4834.0, 4838.0): [3, 0], (4834.0, 4839.0): [1, 4], (4834.0, 4840.0): [2, 14], (4834.0, 4841.0): [2, 7], (4835.0, 4836.0): [23, 44], (4835.0, 4837.0): [30, 5], (4835.0, 4838.0): [3, 0], (4835.0, 4839.0): [2, 2], (4835.0, 4840.0): [4, 6], (4835.0, 4841.0): [28, 8], (4835.0, 4842.0): [39, 24], (4836.0, 4837.0): [6, 22], (4836.0, 4838.0): [12, 0], (4836.0, 4839.0): [0, 1], (4836.0, 4841.0): [1, 3], (4836.0, 4842.0): [4, 1], (4836.0, 4843.0): [4, 10], (4837.0, 4838.0): [24, 12], (4837.0, 4839.0): [23, 1], (4837.0, 4840.0): [3, 0], (4837.0, 4841.0): [1, 18], (4837.0, 4842.0): [3, 3], (4837.0, 4843.0): [13, 17], (4837.0, 4844.0): [11, 9], (4838.0, 4839.0): [2, 3], (4838.0, 4840.0): [1, 0], (4838.0, 4841.0): [2, 0], (4838.0, 4843.0): [1, 3], (4838.0, 4844.0): [7, 2], (4838.0, 4845.0): [21, 11], (4839.0, 4840.0): [2, 3], (4839.0, 4841.0): [8, 5], (4839.0, 4842.0): [0, 4], (4839.0, 4843.0): [0, 2], (4839.0, 4844.0): [10, 5], (4839.0, 4845.0): [28, 12], (4839.0, 4846.0): [1, 2], (4840.0, 4841.0): [5, 5], (4840.0, 4842.0): [7, 1], (4840.0, 4843.0): [1, 0], (4840.0, 4845.0): [4, 2], (4840.0, 4846.0): [2, 22], (4840.0, 4847.0): [31, 0], (4841.0, 4842.0): [6, 6], (4841.0, 4843.0): [10, 10], (4841.0, 4844.0): [2, 0], (4841.0, 4845.0): [0, 2], (4841.0, 4846.0): [0, 3], (4841.0, 4847.0): [5, 3], (4841.0, 4848.0): [2, 9], (4842.0, 4843.0): [5, 6], (4842.0, 4844.0): [3, 18], (4842.0, 4845.0): [2, 0], (4842.0, 4846.0): [1, 0], (4842.0, 4847.0): [10, 8], (4842.0, 4848.0): [24, 3], (4842.0, 4849.0): [17, 23], (4843.0, 4844.0): [3, 0], (4843.0, 4845.0): [15, 0], (4843.0, 4847.0): [3, 13], (4843.0, 4848.0): [6, 22], (4843.0, 4849.0): [25, 10], (4843.0, 4850.0): [1, 0], (4844.0, 4845.0): [3, 18], (4844.0, 4846.0): [13, 5], (4844.0, 4848.0): [1, 0], (4844.0, 4849.0): [4, 10], (4844.0, 4850.0): [18, 20], (4844.0, 4851.0): [13, 13], (4845.0, 4846.0): [22, 1], (4845.0, 4847.0): [5, 5], (4845.0, 4849.0): [1, 0], (4845.0, 4850.0): [2, 0], (4845.0, 4851.0): [29, 2], (4845.0, 4852.0): [10, 15], (4846.0, 4847.0): [8, 4], (4846.0, 4848.0): [3, 10], (4846.0, 4850.0): [5, 12], (4846.0, 4851.0): [6, 11], (4846.0, 4852.0): [6, 19], (4846.0, 4853.0): [2, 10], (4847.0, 4848.0): [2, 23], (4847.0, 4849.0): [3, 4], (4847.0, 4851.0): [1, 0], (4847.0, 4852.0): [4, 1], (4847.0, 4853.0): [10, 2], (4847.0, 4854.0): [5, 9], (4848.0, 4849.0): [1, 16], (4848.0, 4850.0): [3, 2], (4848.0, 4853.0): [3, 0], (4848.0, 4854.0): [5, 9], (4848.0, 4855.0): [14, 0], (4849.0, 4850.0): [4, 0], (4849.0, 4851.0): [2, 4], (4849.0, 4854.0): [1, 5], (4849.0, 4855.0): [3, 17], (4849.0, 4856.0): [0, 4], (4850.0, 4851.0): [2, 1], (4850.0, 4852.0): [5, 1], (4850.0, 4853.0): [0, 20], (4850.0, 4855.0): [0, 16], (4850.0, 4856.0): [22, 2], (4850.0, 4857.0): [3, 2], (4851.0, 4852.0): [2, 17], (4851.0, 4853.0): [19, 0], (4851.0, 4854.0): [1, 0], (4851.0, 4855.0): [0, 14], (4851.0, 4856.0): [1, 1], (4851.0, 4857.0): [0, 10], (4851.0, 4858.0): [2, 3], (4852.0, 4853.0): [4, 28], (4852.0, 4854.0): [9, 0], (4852.0, 4856.0): [1, 0], (4852.0, 4857.0): [3, 4], (4852.0, 4858.0): [16, 2], (4852.0, 4859.0): [2, 16], (4853.0, 4854.0): [2, 21], (4853.0, 4855.0): [2, 0], (4853.0, 4856.0): [0, 2], (4853.0, 4857.0): [0, 3], (4853.0, 4858.0): [3, 1], (4853.0, 4859.0): [12, 22], (4853.0, 4860.0): [6, 24], (4854.0, 4855.0): [2, 11], (4854.0, 4856.0): [3, 0], (4854.0, 4857.0): [2, 1], (4854.0, 4859.0): [1, 1], (4854.0, 4860.0): [1, 1], (4854.0, 4861.0): [4, 2], (4855.0, 4856.0): [21, 1], (4855.0, 4857.0): [1, 0], (4855.0, 4859.0): [1, 0], (4855.0, 4860.0): [1, 1], (4855.0, 4861.0): [21, 3], (4855.0, 4862.0): [1, 8], (4856.0, 4857.0): [3, 1], (4856.0, 4858.0): [5, 1], (4856.0, 4860.0): [2, 4], (4856.0, 4862.0): [2, 1], (4857.0, 4858.0): [3, 0], (4857.0, 4859.0): [8, 0], (4857.0, 4860.0): [3, 0], (4857.0, 4861.0): [4, 0], (4857.0, 4863.0): [7, 0], (4857.0, 4864.0): [1, 0], (4858.0, 4859.0): [4, 2], (4858.0, 4860.0): [3, 0], (4858.0, 4862.0): [0, 2], (4858.0, 4863.0): [5, 10], (4858.0, 4865.0): [17, 14], (4859.0, 4860.0): [26, 19], (4859.0, 4861.0): [14, 0], (4859.0, 4862.0): [1, 0], (4859.0, 4863.0): [2, 0], (4859.0, 4864.0): [21, 26], (4859.0, 4865.0): [12, 13], (4859.0, 4866.0): [41, 9], (4860.0, 4861.0): [3, 30], (4860.0, 4862.0): [19, 10], (4860.0, 4864.0): [16, 1], (4860.0, 4865.0): [24, 19], (4860.0, 4866.0): [36, 22], (4860.0, 4867.0): [3, 0], (4861.0, 4862.0): [1, 22], (4861.0, 4863.0): [0, 5], (4861.0, 4864.0): [1, 4], (4861.0, 4865.0): [7, 0], (4861.0, 4866.0): [1, 6], (4861.0, 4867.0): [38, 41], (4861.0, 4868.0): [2, 48], (4862.0, 4863.0): [16, 29], (4862.0, 4864.0): [1, 4], (4862.0, 4865.0): [2, 1], (4862.0, 4866.0): [1, 2], (4862.0, 4867.0): [17, 0], (4862.0, 4868.0): [16, 16], (4862.0, 4869.0): [3, 0], (4863.0, 4864.0): [9, 7], (4863.0, 4865.0): [6, 1], (4863.0, 4866.0): [10, 0], (4863.0, 4867.0): [2, 1], (4863.0, 4868.0): [18, 1], (4863.0, 4869.0): [2, 1], (4863.0, 4870.0): [4, 2], (4864.0, 4865.0): [16, 17], (4864.0, 4866.0): [10, 0], (4864.0, 4868.0): [0, 2], (4864.0, 4870.0): [26, 2], (4864.0, 4871.0): [2, 12], (4865.0, 4866.0): [15, 11], (4865.0, 4867.0): [23, 0], (4865.0, 4868.0): [1, 0], (4865.0, 4870.0): [25, 0], (4865.0, 4871.0): [4, 4], (4865.0, 4872.0): [1, 0], (4866.0, 4867.0): [4, 48], (4866.0, 4868.0): [26, 7], (4866.0, 4869.0): [2, 0], (4866.0, 4871.0): [3, 6], (4866.0, 4872.0): [23, 19], (4866.0, 4873.0): [23, 53], (4867.0, 4868.0): [4, 1], (4867.0, 4869.0): [3, 0], (4867.0, 4871.0): [11, 4], (4867.0, 4872.0): [16, 6], (4867.0, 4873.0): [7, 2], (4867.0, 4874.0): [2, 0], (4868.0, 4869.0): [0, 12], (4868.0, 4870.0): [0, 2], (4868.0, 4872.0): [1, 2], (4868.0, 4873.0): [11, 2], (4868.0, 4874.0): [28, 1], (4868.0, 4875.0): [2, 17], (4869.0, 4870.0): [2, 14], (4869.0, 4871.0): [3, 0], (4869.0, 4872.0): [0, 2], (4869.0, 4873.0): [0, 1], (4869.0, 4874.0): [4, 14], (4869.0, 4875.0): [31, 7], (4869.0, 4876.0): [0, 2], (4870.0, 4871.0): [29, 14], (4870.0, 4872.0): [2, 0], (4870.0, 4874.0): [1, 0], (4870.0, 4875.0): [4, 2], (4870.0, 4876.0): [26, 8], (4871.0, 4872.0): [6, 0], (4871.0, 4873.0): [3, 0], (4871.0, 4875.0): [2, 1], (4871.0, 4876.0): [6, 0], (4871.0, 4877.0): [38, 27], (4871.0, 4878.0): [8, 1], (4872.0, 4873.0): [4, 10], (4872.0, 4874.0): [0, 20], (4872.0, 4876.0): [1, 0], (4872.0, 4877.0): [0, 2], (4872.0, 4878.0): [20, 2], (4872.0, 4879.0): [28, 16], (4873.0, 4874.0): [19, 14], (4873.0, 4875.0): [7, 2], (4873.0, 4876.0): [0, 2], (4873.0, 4878.0): [0, 2], (4873.0, 4879.0): [3, 1], (4873.0, 4880.0): [1, 0], (4874.0, 4875.0): [2, 1], (4874.0, 4876.0): [4, 0], (4874.0, 4877.0): [3, 0], (4874.0, 4879.0): [10, 0], (4874.0, 4880.0): [9, 1], (4874.0, 4881.0): [0, 1], (4875.0, 4876.0): [2, 3], (4875.0, 4877.0): [3, 0], (4875.0, 4878.0): [2, 0], (4875.0, 4879.0): [0, 1], (4875.0, 4880.0): [0, 1], (4875.0, 4882.0): [12, 5], (4876.0, 4877.0): [17, 2], (4876.0, 4878.0): [16, 0], (4876.0, 4881.0): [3, 1], (4877.0, 4878.0): [15, 6], (4877.0, 4879.0): [2, 0], (4877.0, 4882.0): [1, 2], (4877.0, 4883.0): [1, 0], (4877.0, 4884.0): [17, 2], (4878.0, 4879.0): [4, 1], (4878.0, 4880.0): [4, 0], (4878.0, 4881.0): [0, 1], (4878.0, 4883.0): [6, 2], (4878.0, 4884.0): [1, 19], (4879.0, 4880.0): [0, 24], (4879.0, 4881.0): [17, 0], (4879.0, 4885.0): [4, 0], (4879.0, 4886.0): [55, 17], (4880.0, 4881.0): [4, 3], (4880.0, 4882.0): [5, 0], (4880.0, 4884.0): [3, 0], (4880.0, 4885.0): [2, 5], (4880.0, 4886.0): [6, 0], (4880.0, 4887.0): [14, 0], (4881.0, 4882.0): [1, 9], (4881.0, 4884.0): [0, 1], (4881.0, 4885.0): [2, 0], (4881.0, 4886.0): [1, 23], (4881.0, 4887.0): [3, 11], (4881.0, 4888.0): [18, 7], (4882.0, 4883.0): [0, 10], (4882.0, 4884.0): [4, 0], (4882.0, 4887.0): [16, 1], (4882.0, 4888.0): [4, 3], (4882.0, 4889.0): [2, 0], (4883.0, 4884.0): [3, 2], (4883.0, 4885.0): [9, 6], (4883.0, 4889.0): [3, 0], (4883.0, 4890.0): [0, 1], (4884.0, 4885.0): [0, 5], (4884.0, 4886.0): [9, 2], (4884.0, 4889.0): [0, 2], (4884.0, 4891.0): [2, 0], (4885.0, 4886.0): [3, 3], (4885.0, 4887.0): [17, 12], (4885.0, 4888.0): [1, 0], (4885.0, 4891.0): [4, 0], (4885.0, 4892.0): [21, 1], (4886.0, 4887.0): [5, 0], (4886.0, 4888.0): [1, 0], (4886.0, 4892.0): [1, 0], (4886.0, 4893.0): [0, 3], (4887.0, 4889.0): [1, 2], (4887.0, 4891.0): [1, 1], (4887.0, 4892.0): [0, 1], (4887.0, 4893.0): [17, 0], (4888.0, 4889.0): [1, 0], (4889.0, 4890.0): [2, 0], (4889.0, 4891.0): [1, 0], (4889.0, 4893.0): [0, 1], (4890.0, 4891.0): [1, 0], (4890.0, 4892.0): [1, 0]}



                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.b_mid.append((bid_vwap+ask_vwap)/2)
                self.b_spread.append(best_ask-best_bid)

                if len(self.b_mid) < 5:
                    mu = round(statistics.fmean(self.b_mid))    
                else:
                    mu = round(statistics.fmean(self.b_mid[len(self.b_mid)-6:]))
                spread = round(statistics.fmean(self.b_spread))

                if (best_bid,best_ask) not in D.keys():
                    orders.append(Order(product, mu + spread//2, (-q-limit)))
                    orders.append(Order(product, mu - spread//2, (limit-q)))

                else:

                    p = D[(best_bid,best_ask)][0]/(D[(best_bid,best_ask)][0] + D[(best_bid,best_ask)][1])
                    if p == 1:
                        p = 0.99
                    if p == 0:
                        p = 0.01
                    func = (p*(limit-q) + q)/(1-p)
                    sell_qty = math.floor(min(limit+q,max(0,func)))
                    buy_qty = math.floor(((1-p)*sell_qty - q)/p)

                    buy_qty = min(limit-q,max(0,buy_qty))

                    f = 0

                    if best_ask > mu and best_bid < mu:
                        if q < 0:

  
                            orders.append(Order(product, best_ask, -math.ceil(sell_qty*f)))
                            orders.append(Order(product, best_ask-1, -math.floor(sell_qty*(1-f))))
                            orders.append(Order(product, best_bid+1, math.floor(buy_qty*(1-f))))
                            orders.append(Order(product, best_bid, math.floor(buy_qty*f)))
                        if q>=0:

                            
                            orders.append(Order(product, best_ask, -math.ceil(sell_qty*f)))
                            orders.append(Order(product, best_ask-1, -math.floor(sell_qty*(1-f))))
                            orders.append(Order(product, best_bid+1, math.floor(buy_qty*(1-f))))
                            orders.append(Order(product, best_bid, math.floor(buy_qty*f)))
                    
                    elif best_bid >= mu:
                        if best_bid == mu:
                            if q >= 0:

                                orders.append(Order(product, best_bid+1, -sell_qty))
                            else:

                                orders.append(Order(product, best_bid+1, -math.ceil(sell_qty)))
                        else:

                            if q >= 0:
                                
                                orders.append(Order(product, best_bid, -math.ceil(sell_qty*f)))
                                orders.append(Order(product, best_bid - 1, -math.floor(sell_qty*(1-f))))
                            else:
                                
                                orders.append(Order(product, best_bid, -math.ceil(sell_qty*f)))
                                orders.append(Order(product, best_bid-1, -math.floor(sell_qty*(1-f))))
                    else:
                        if best_ask == mu:
                            if q <= 0:
                                
                                orders.append(Order(product, best_ask-1, buy_qty))
                            else:
                                
                                orders.append(Order(product, best_ask-1, math.ceil(buy_qty)))

                        else:
                            if q <= 0:
                                
                                orders.append(Order(product, best_ask, math.ceil(buy_qty*f)))
                                orders.append(Order(product, best_ask + 1, math.ceil(buy_qty*(1-f))))
                            else:
                                
                                orders.append(Order(product, best_ask, math.ceil(buy_qty*f)))
                                orders.append(Order(product, best_ask+1, math.floor(buy_qty*(1-f))))


                result[product] = orders

            if product == 'COCONUTS':
                limit = 600

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.c_mid.append((bid_vwap+ask_vwap)/2)
                self.c_spread.append(best_ask-best_bid)



                # result[product] = orders

            if product == 'PINA_COLADAS':
                limit = 300

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.pc_mid.append((bid_vwap+ask_vwap)/2)
                self.pc_spread.append(best_ask-best_bid)

        
                func = (self.pc_mid[-1]- 1.62890989*self.c_mid[-1] -1972.2436601450845)
                if func > 35:
                    if q > 0:
                        orders.append(Order(product,best_ask,-math.ceil(q/2)))
                        orders.append(Order(product,best_ask - 1,-math.floor(q/2)))
                    orders.append(Order(product,best_ask,-math.ceil((limit+q)/2)))
                    orders.append(Order(product,best_ask - 1,-math.floor((limit+q)/2)))
                if func < -35:
                    if q<0:
                        orders.append(Order(product,best_bid,-math.ceil(q/2)))
                        orders.append(Order(product,best_bid+1,-math.floor(q/2)))
                    orders.append(Order(product,best_bid + 1,math.floor((limit-q)/2)))
                    orders.append(Order(product,best_bid,math.ceil((limit-q)/2)))
                # if func < 2 and func > -2: 
                #     if q<0:
                #         orders.append(Order(product,best_ask,-q))
                #     else:
                #         orders.append(Order(product,best_bid,-q))
                
                result[product] = orders
            
                # if func < 0.2 and func > -0.2: 
                #     if q<0:
                #         orders.append(Order(product,best_ask,-q))
                #     else:
                #         orders.append(Order(product,best_bid,-q))
                result[product] = orders
                # print(orders)

            if product == 'BERRIES':
                limit = 250
                D14 = {(3997.0, 4003.0): [0, 6], (3997.0, 4004.0): [11, 14], (3998.0, 4001.0): [10, 0], (3999.0, 4006.0): [5, 0], (4000.0, 4007.0): [17, 0], (4003.0, 4006.0): [1, 0], (4001.0, 4004.0): [0, 15], (3994.0, 4001.0): [0, 5], (3993.0, 4000.0): [10, 0], (3989.0, 3996.0): [0, 4], (3989.0, 3993.0): [3, 0], (3988.0, 3995.0): [13, 0], (3987.0, 3994.0): [16, 11], (3987.0, 3991.0): [0, 4], (3987.0, 3990.0): [0, 11], (3986.0, 3993.0): [8, 16], (3984.0, 3991.0): [54, 35], (3983.0, 3990.0): [28, 19], (3985.0, 3992.0): [58, 1], (3980.0, 3987.0): [10, 0], (3976.0, 3983.0): [13, 0], (3975.0, 3982.0): [0, 10], (3975.0, 3978.0): [3, 0], (3973.0, 3980.0): [14, 0], (3974.0, 3978.0): [4, 0], (3974.0, 3981.0): [0, 9], (3974.0, 3977.0): [4, 0], (3972.0, 3979.0): [19, 70], (3972.0, 3976.0): [0, 7], (3972.0, 3975.0): [2, 5], (3972.0, 3974.0): [2, 0], (3971.0, 3978.0): [70, 77], (3971.0, 3975.0): [2, 0], (3969.0, 3976.0): [63, 42], (3969.0, 3973.0): [1, 0], (3970.0, 3976.0): [0, 11], (3970.0, 3977.0): [58, 45], (3970.0, 3972.0): [7, 5], (3968.0, 3972.0): [5, 0], (3968.0, 3975.0): [0, 15], (3967.0, 3973.0): [7, 0], (3967.0, 3974.0): [65, 56], (3966.0, 3973.0): [16, 20], (3966.0, 3970.0): [3, 0], (3965.0, 3972.0): [11, 45], (3965.0, 3971.0): [0, 18], (3964.0, 3968.0): [3, 0], (3964.0, 3971.0): [26, 58], (3964.0, 3967.0): [0, 5], (3963.0, 3970.0): [30, 70], (3962.0, 3966.0): [0, 13], (3962.0, 3969.0): [27, 57], (3962.0, 3965.0): [0, 5], (3961.0, 3968.0): [27, 34], (3960.0, 3966.0): [0, 10], (3960.0, 3967.0): [44, 32], (3960.0, 3964.0): [0, 8], (3959.0, 3966.0): [10, 25], (3958.0, 3965.0): [20, 19], (3958.0, 3962.0): [4, 0], (3957.0, 3963.0): [14, 1], (3957.0, 3964.0): [18, 37], (3957.0, 3960.0): [7, 0], (3956.0, 3963.0): [12, 24], (3956.0, 3960.0): [10, 0], (3955.0, 3962.0): [28, 10], (3954.0, 3958.0): [2, 0], (3946.0, 3953.0): [10, 0], (3945.0, 3952.0): [0, 12], (3945.0, 3948.0): [1, 0], (3944.0, 3951.0): [16, 0], (3942.0, 3949.0): [10, 13], (3941.0, 3948.0): [0, 11], (3943.0, 3950.0): [12, 0], (3943.0, 3946.0): [8, 0], (3948.0, 3955.0): [19, 0], (3952.0, 3959.0): [9, 10], (3952.0, 3955.0): [14, 0], (3953.0, 3960.0): [71, 0], (3953.0, 3957.0): [0, 9], (3950.0, 3953.0): [0, 15], (3950.0, 3957.0): [29, 22], (3951.0, 3958.0): [6, 33], (3951.0, 3957.0): [20, 0], (3940.0, 3944.0): [3, 0], (3940.0, 3946.0): [0, 2], (3940.0, 3947.0): [11, 10], (3939.0, 3945.0): [0, 7], (3939.0, 3946.0): [0, 1], (3939.0, 3942.0): [13, 0], (3939.0, 3941.0): [14, 0], (3938.0, 3945.0): [0, 10], (3937.0, 3944.0): [0, 10], (3935.0, 3942.0): [5, 42], (3934.0, 3937.0): [8, 0], (3933.0, 3940.0): [0, 14], (3932.0, 3939.0): [2, 12], (3931.0, 3938.0): [0, 10], (3930.0, 3936.0): [14, 0], (3930.0, 3937.0): [21, 0], (3930.0, 3933.0): [1, 0], (3925.0, 3929.0): [0, 13], (3924.0, 3931.0): [0, 11], (3924.0, 3927.0): [24, 0], (3922.0, 3929.0): [0, 3], (3922.0, 3926.0): [0, 14], (3922.0, 3925.0): [1, 0], (3921.0, 3928.0): [14, 9], (3921.0, 3924.0): [5, 0], (3920.0, 3927.0): [27, 0], (3920.0, 3926.0): [11, 0], (3920.0, 3922.0): [16, 0], (3919.0, 3926.0): [2, 20], (3919.0, 3922.0): [0, 4], (3918.0, 3925.0): [0, 11], (3918.0, 3924.0): [0, 5], (3917.0, 3924.0): [45, 28], (3916.0, 3923.0): [21, 18], (3915.0, 3922.0): [29, 52], (3914.0, 3921.0): [33, 26], (3914.0, 3920.0): [0, 23], (3914.0, 3918.0): [0, 11], (3913.0, 3920.0): [27, 19], (3913.0, 3916.0): [0, 9], (3912.0, 3919.0): [10, 13], (3912.0, 3918.0): [0, 16], (3911.0, 3918.0): [17, 3], (3911.0, 3914.0): [4, 0], (3910.0, 3917.0): [3, 28], (3910.0, 3913.0): [2, 0], (3910.0, 3912.0): [14, 0], (3909.0, 3916.0): [17, 27], (3909.0, 3913.0): [0, 13], (3908.0, 3915.0): [5, 0], (3908.0, 3914.0): [19, 0], (3907.0, 3913.0): [4, 0], (3907.0, 3914.0): [28, 0], (3907.0, 3910.0): [0, 5], (3906.0, 3913.0): [8, 7], (3906.0, 3912.0): [0, 16], (3905.0, 3912.0): [17, 50], (3905.0, 3908.0): [18, 0], (3905.0, 3909.0): [0, 15], (3904.0, 3911.0): [60, 5], (3904.0, 3907.0): [0, 3], (3903.0, 3910.0): [47, 31], (3903.0, 3907.0): [0, 3], (3902.0, 3908.0): [20, 0], (3902.0, 3909.0): [14, 10], (3902.0, 3906.0): [8, 0], (3901.0, 3908.0): [58, 41], (3901.0, 3907.0): [0, 1], (3900.0, 3906.0): [17, 9], (3900.0, 3907.0): [72, 37], (3899.0, 3906.0): [83, 10], (3899.0, 3905.0): [9, 4], (3899.0, 3902.0): [7, 5], (3898.0, 3905.0): [21, 28], (3898.0, 3904.0): [3, 0], (3897.0, 3904.0): [58, 23], (3897.0, 3903.0): [8, 0], (3897.0, 3900.0): [6, 0], (3896.0, 3903.0): [83, 19], (3896.0, 3902.0): [15, 0], (3896.0, 3900.0): [6, 0], (3895.0, 3902.0): [37, 23], (3894.0, 3900.0): [0, 15], (3894.0, 3901.0): [44, 4], (3894.0, 3898.0): [9, 0], (3893.0, 3900.0): [8, 18], (3893.0, 3897.0): [4, 0], (3892.0, 3899.0): [90, 0], (3892.0, 3895.0): [4, 0], (3892.0, 3898.0): [26, 0], (3891.0, 3898.0): [96, 12], (3891.0, 3893.0): [3, 0], (3889.0, 3896.0): [27, 0], (3889.0, 3895.0): [10, 0], (3890.0, 3896.0): [13, 0], (3890.0, 3897.0): [79, 0], (3888.0, 3895.0): [26, 20], (3888.0, 3894.0): [17, 18], (3887.0, 3894.0): [46, 0], (3887.0, 3891.0): [5, 0], (3886.0, 3893.0): [26, 11], (3885.0, 3891.0): [23, 0], (3885.0, 3892.0): [68, 0], (3884.0, 3891.0): [32, 2], (3867.0, 3874.0): [26, 34], (3867.0, 3873.0): [10, 26], (3867.0, 3870.0): [0, 10], (3866.0, 3873.0): [39, 98], (3866.0, 3869.0): [0, 25], (3866.0, 3868.0): [0, 4], (3865.0, 3871.0): [0, 12], (3865.0, 3869.0): [0, 10], (3865.0, 3872.0): [15, 31], (3865.0, 3868.0): [9, 0], (3865.0, 3867.0): [0, 23], (3864.0, 3871.0): [0, 28], (3864.0, 3870.0): [0, 3], (3864.0, 3867.0): [3, 0], (3863.0, 3870.0): [0, 35], (3869.0, 3872.0): [0, 1], (3869.0, 3875.0): [3, 7], (3869.0, 3876.0): [10, 56], (3868.0, 3874.0): [0, 10], (3868.0, 3871.0): [0, 1], (3868.0, 3872.0): [14, 0], (3868.0, 3875.0): [16, 32], (3870.0, 3876.0): [0, 26], (3870.0, 3877.0): [0, 9], (3871.0, 3878.0): [10, 28], (3862.0, 3869.0): [23, 20], (3862.0, 3866.0): [0, 8], (3874.0, 3881.0): [11, 0], (3874.0, 3880.0): [9, 0], (3873.0, 3877.0): [6, 0], (3861.0, 3868.0): [6, 11], (3860.0, 3866.0): [0, 7], (3860.0, 3867.0): [6, 17], (3860.0, 3863.0): [0, 3], (3859.0, 3865.0): [0, 4], (3859.0, 3866.0): [5, 17], (3859.0, 3862.0): [0, 11], (3858.0, 3865.0): [0, 64], (3858.0, 3861.0): [2, 18], (3858.0, 3864.0): [0, 10], (3858.0, 3862.0): [0, 11], (3857.0, 3863.0): [0, 44], (3857.0, 3864.0): [14, 77], (3856.0, 3863.0): [0, 109], (3856.0, 3860.0): [0, 10], (3856.0, 3862.0): [2, 5], (3855.0, 3861.0): [20, 25], (3855.0, 3862.0): [32, 164], (3855.0, 3858.0): [0, 4], (3854.0, 3861.0): [57, 44], (3854.0, 3860.0): [0, 24], (3854.0, 3857.0): [3, 0], (3854.0, 3858.0): [4, 0], (3853.0, 3860.0): [54, 47], (3853.0, 3856.0): [0, 25], (3853.0, 3857.0): [2, 0], (3853.0, 3859.0): [0, 31], (3853.0, 3855.0): [8, 0], (3852.0, 3858.0): [22, 1], (3852.0, 3859.0): [42, 84], (3851.0, 3857.0): [8, 2], (3851.0, 3858.0): [30, 29], (3851.0, 3854.0): [0, 13], (3851.0, 3853.0): [0, 7], (3850.0, 3857.0): [48, 19], (3849.0, 3856.0): [18, 24], (3849.0, 3855.0): [12, 9], (3848.0, 3855.0): [0, 19], (3848.0, 3852.0): [0, 1], (3848.0, 3850.0): [0, 1], (3847.0, 3854.0): [5, 49], (3847.0, 3851.0): [0, 20], (3847.0, 3850.0): [0, 18], (3846.0, 3853.0): [16, 55], (3846.0, 3848.0): [0, 16], (3845.0, 3852.0): [4, 42], (3845.0, 3851.0): [11, 0], (3845.0, 3849.0): [2, 0], (3844.0, 3851.0): [14, 69], (3844.0, 3850.0): [0, 4], (3844.0, 3847.0): [0, 3], (3843.0, 3850.0): [0, 38], (3842.0, 3848.0): [5, 5], (3842.0, 3849.0): [0, 11], (3842.0, 3845.0): [10, 10], (3841.0, 3848.0): [0, 19], (3841.0, 3847.0): [7, 0], (3840.0, 3847.0): [12, 8], (3840.0, 3843.0): [0, 5], (3839.0, 3846.0): [0, 5], (3837.0, 3839.0): [0, 17], (3875.0, 3878.0): [6, 0], (3875.0, 3879.0): [0, 11], (3875.0, 3882.0): [10, 0], (3877.0, 3884.0): [27, 0], (3876.0, 3883.0): [10, 0], (3878.0, 3885.0): [26, 0], (3879.0, 3886.0): [14, 0], (3882.0, 3889.0): [15, 0], (3882.0, 3888.0): [25, 0], (3883.0, 3889.0): [10, 0], (3883.0, 3885.0): [10, 0]}

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.ber_mid.append((bid_vwap+ask_vwap)/2)
                self.ber_spread.append(best_ask-best_bid)

                if state.timestamp < 250000 or state.timestamp > 750000:
                    if len(self.ber_mid) < 6:
                        mu = round(statistics.fmean(self.ber_mid))    
                    else:
                        mu = round(statistics.fmean(self.ber_mid[len(self.ber_mid)-6:]))
                    spread = round(statistics.fmean(self.ber_spread))

                    if (best_bid,best_ask) not in D14.keys():
                        orders.append(Order(product, mu + spread//2, (-q-limit)))
                        orders.append(Order(product, mu - spread//2, (limit-q)))

                    else:

                        p = D14[(best_bid,best_ask)][0]/(D14[(best_bid,best_ask)][0] + D14[(best_bid,best_ask)][1])
                        if p == 1:
                            p = 0.99
                        if p == 0:
                            p = 0.01
                        func = (p*(limit-q) + q)/(1-p)
                        sell_qty = math.floor(min(limit+q,max(0,func)))
                        buy_qty = math.floor(((1-p)*sell_qty - q)/p)

                        buy_qty = min(limit-q,max(0,buy_qty))

                        f = 0.5

                        if best_ask > mu and best_bid < mu:
                            if q < 0:

      
                                orders.append(Order(product, best_ask, -math.ceil(sell_qty*f)))
                                orders.append(Order(product, best_ask-1, -math.floor(sell_qty*(1-f))))
                                orders.append(Order(product, best_bid+1, math.floor(buy_qty*(1-f))))
                                orders.append(Order(product, best_bid, math.floor(buy_qty*f)))
                            if q>=0:

                                
                                orders.append(Order(product, best_ask, -math.ceil(sell_qty*f)))
                                orders.append(Order(product, best_ask-1, -math.floor(sell_qty*(1-f))))
                                orders.append(Order(product, best_bid+1, math.floor(buy_qty*(1-f))))
                                orders.append(Order(product, best_bid, math.floor(buy_qty*f)))
                        
                        elif best_bid >= mu:
                            if best_bid == mu:
                                if q >= 0:

                                    orders.append(Order(product, best_bid+1, -sell_qty))
                                else:

                                    orders.append(Order(product, best_bid+1, -math.ceil(sell_qty)))
                            else:

                                if q >= 0:
                                    
                                    orders.append(Order(product, best_bid, -math.ceil(sell_qty*f)))
                                    orders.append(Order(product, best_bid - 1, -math.floor(sell_qty*(1-f))))
                                else:
                                    
                                    orders.append(Order(product, best_bid, -math.ceil(sell_qty*f)))
                                    orders.append(Order(product, best_bid-1, -math.floor(sell_qty*(1-f))))
                        else:
                            if best_ask == mu:
                                if q <= 0:
                                    
                                    orders.append(Order(product, best_ask-1, buy_qty))
                                else:
                                    
                                    orders.append(Order(product, best_ask-1, math.ceil(buy_qty)))

                            else:
                                if q <= 0:
                                    
                                    orders.append(Order(product, best_ask, math.ceil(buy_qty*f)))
                                    orders.append(Order(product, best_ask + 1, math.ceil(buy_qty*(1-f))))
                                else:
                                    
                                    orders.append(Order(product, best_ask, math.ceil(buy_qty*f)))
                                    orders.append(Order(product, best_ask+1, math.floor(buy_qty*(1-f))))

                elif state.timestamp >= 250000 and state.timestamp < 500000:
                    orders.append(Order(product,best_ask, limit - q))
                elif state.timestamp >= 500000 and state.timestamp <= 750000:
                    orders.append(Order(product,best_bid, -limit - q))

                result[product] = orders
            if product == 'DIVING_GEAR':
                limit = 50

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []

                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0
                
                self.dolphins.append(state.observations['DOLPHIN_SIGHTINGS'])

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                wmid = int(round((ask_vwap + bid_vwap)/2))

                self.dg_mids.append(wmid)
                if len(self.dg_mids)>1000:
                    t1 = self.dg_mids
                    self.dg_mids = t1[1:]

                if len(self.dolphins)>2:
                    t1 = self.dolphins
                    self.dolphins = t1[1:]

                if len(self.dolphins)>=2:
                    lag = self.dolphins[-1] - self.dolphins[-2]
                else:
                    lag = 0
                
                if state.timestamp < self.dg_time[-1][0]:

                    if abs(q) != limit:
                        if self.dg_time[-1][1] == 'BUY':
                            orders.append(Order(product, best_bid, (-limit-q)))
                        if self.dg_time[-1][1] == 'SELL':
                            orders.append(Order(product, best_ask, (limit-q)))

                    print('TIME:', state.timestamp, 'ORDERS:', orders, 'TRADE_TIMESTAMP', self.dg_time[-1][0], 'ACTION:', 'CONTINUE', 'STRING:', self.dg_time[-1][1], 'POSITION:', q)
                
                
                elif state.timestamp == self.dg_time[-1][0]:
                    
                    self.dg_count = [0, 0, 0]
                    if q!=0:
                        if self.dg_time[-1][1] == 'BUY':
                            orders.append(Order(product, best_ask+2, -q))
                        if self.dg_time[-1][1] == 'SELL':
                            orders.append(Order(product, best_bid-2, -q))

                    print('TIME:', state.timestamp, 'ORDERS:', orders, 'TRADE_TIMESTAMP', self.dg_time[-1][0], 'ACTION:', self.dg_time[-1][1])


                else:

                    if lag>=8:
                        orders.append(Order(product, best_ask, (limit-q)))
                        if lag<13:
                            self.dg_time.append((int(state.timestamp) + 35000, 'SELL'))
                        else:
                            self.dg_time.append((int(state.timestamp) + 70000, 'SELL'))
                        
                        print('TIME:',state.timestamp, 'ORDERS:', orders, 'TRADE_TIMESTAMP', self.dg_time[-1][0], 'UPWARDS_TREND')
                    
                    elif lag<=-8:
                        orders.append(Order(product, best_bid, (-limit-q)))
                        if lag>-13:
                            self.dg_time.append((int(state.timestamp) + 35000, 'BUY'))
                        else:
                            self.dg_time.append((int(state.timestamp) + 70000, 'BUY'))
                        
                        print('TIME:',state.timestamp, 'ORDERS:', orders, 'TRADE_TIMESTAMP', self.dg_time[-1][0], 'DOWNWARDS_TREND')

                    else:
                        sd_wmid = statistics.stdev(self.dg_mids)
                        mean_wmid = statistics.fmean(self.dg_mids)

                        if wmid >= mean_wmid + 2*sd_wmid:
                            self.dg_count = [1, 1, 0]
                            orders.append(Order(product, best_bid, -(limit+q)))

                        elif (wmid >= mean_wmid + 1.5*sd_wmid) & (wmid < mean_wmid + 2*sd_wmid):
                            self.dg_count = [1, 0, 0]

                        elif (wmid <= mean_wmid - 1.5*sd_wmid) & (wmid > mean_wmid - 2*sd_wmid):
                            self.dg_count = [-1, 0, 0]

                        elif wmid < mean_wmid - 2*sd_wmid:
                            self.dg_count = [-1, -1, 0]
                            orders.append(Order(product, best_ask, (limit-q)))
                        
                        else:
                            if self.dg_count == [1, 0, 0]:
                                orders.append(Order(product, best_bid, -(limit+q)))
                                self.dg_count = [0, 0, 1]
                            
                            elif self.dg_count == [0, 0, 1]:
                                orders.append(Order(product, best_bid, -(limit+q)))
                                if q == -limit:
                                    self.dg_count = [0, 0, 0]
                            
                            elif self.dg_count == [-1, 0, 0]:
                                orders.append(Order(product, best_ask, (limit-q)))
                                self.dg_count = [0, 0, -1]

                            elif self.dg_count == [0, 0, -1]:
                                orders.append(Order(product, best_ask, (limit-q)))
                                if q == limit:
                                    self.dg_count = [0, 0, 0]


                        print('TIME:', state.timestamp, 'ORDERS:', orders, 'POSITION:', q, 'MA_TRADING')


                result[product] = orders

            if product == 'PICNIC_BASKET':
                limit = 70

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.pb_mid.append((bid_vwap+ask_vwap)/2)
                self.pb_spread.append(best_ask-best_bid)
                # 1.02869341 1.71316352 2.58489424
                # func = ((self.pb_mid[-1]- 1.02869341*self.bag_mid[-1] -1.71316352*self.uku_mid[-1] -2.58489424*self.dip_mid[-1] -13312.578009698685))/126.94804825609309
                func = ((self.pb_mid[-1]- 2*self.bag_mid[-1] -1*self.uku_mid[-1] -4*self.dip_mid[-1] -13312.578009698685)+21335.870259698688)/177.51227176057452
                if func > 1.5:
                    # if q > 0:
                    #     orders.append(Order(product,best_bid,-math.ceil(q/2)))
                    #     orders.append(Order(product,best_bid,-math.floor(q/2)))
                    orders.append(Order(product,best_bid,-math.ceil((limit+q)/2)))
                    orders.append(Order(product,best_bid,-math.floor((limit+q)/2)))
                if func < -1.5:
                    # if q<0:
                    #     orders.append(Order(product,best_ask,-math.ceil(q/2)))
                    #     orders.append(Order(product,best_ask,-math.floor(q/2)))
                    orders.append(Order(product,best_ask,math.floor((limit-q)/2)))
                    orders.append(Order(product,best_ask,math.ceil((limit-q)/2)))
            
                # if func < 0.2 and func > -0.2: 
                #     if q<0:
                #         orders.append(Order(product,best_ask,-q))
                #     else:
                #         orders.append(Order(product,best_bid,-q))
                result[product] = orders
            if product == 'BAGUETTE':
                limit = 140

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.bag_mid.append((bid_vwap+ask_vwap)/2)
                self.bag_spread.append(best_ask-best_bid)

                func = ((self.pb_mid[-1]- 2*self.bag_mid[-1] -1*self.uku_mid[-1] -4*self.dip_mid[-1] -13312.578009698685)+21335.870259698688)/177.51227176057452
                if func > 1.5:
                    # if q > 0:
                    #     orders.append(Order(product,best_bid,-math.ceil(q/2)))
                    #     orders.append(Order(product,best_bid,-math.floor(q/2)))
                    orders.append(Order(product,best_bid,-math.ceil((limit+q)/2)))
                    orders.append(Order(product,best_bid,-math.floor((limit+q)/2)))
                if func < -1.5:
                    # if q<0:
                    #     orders.append(Order(product,best_ask,-math.ceil(q/2)))
                    #     orders.append(Order(product,best_ask,-math.floor(q/2)))
                    orders.append(Order(product,best_ask,math.floor((limit-q)/2)))
                    orders.append(Order(product,best_ask,math.ceil((limit-q)/2)))
            
                # if func < 0.2 and func > -0.2: 
                #     if q<0:
                #         orders.append(Order(product,best_ask,-q))
                #     else:
                #         orders.append(Order(product,best_bid,-q))
                result[product] = orders
            if product == 'UKULELE':
                limit = 70

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.uku_mid.append((bid_vwap+ask_vwap)/2)
                self.uku_spread.append(best_ask-best_bid)

                func = ((self.pb_mid[-1]- 2*self.bag_mid[-1] -1*self.uku_mid[-1] -4*self.dip_mid[-1] -13312.578009698685)+21335.870259698688)/177.51227176057452
                if func > 1.5:
                    # if q > 0:
                    #     orders.append(Order(product,best_ask,-math.ceil(q/2)))
                    #     orders.append(Order(product,best_ask - 1,-math.floor(q/2)))
                    orders.append(Order(product,best_ask,math.ceil((limit-q)/2)))
                    orders.append(Order(product,best_ask,math.floor((limit-q)/2)))
                if func < -1.5:
                    # if q<0:
                    #     orders.append(Order(product,best_bid,-math.ceil(q/2)))
                    #     orders.append(Order(product,best_bid+1,-math.floor(q/2)))
                    orders.append(Order(product,best_bid,-math.floor((limit+q)/2)))
                    orders.append(Order(product,best_bid,-math.ceil((limit+q)/2)))            
                # if func < 0.2 and func > -0.2: 
                #     if q<0:
                #         orders.append(Order(product,best_ask,-q))
                #     else:
                #         orders.append(Order(product,best_bid,-q))
                result[product] = orders
            if product == 'DIP':
                limit = 280

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.sell_orders[key]
                            vol+=order_depth.sell_orders[key]
                            ctr+=1
                    ask_vwap = tot/vol


                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot+=key*order_depth.buy_orders[key]
                            vol+=order_depth.buy_orders[key]
                            ctr+=1
                    bid_vwap = tot/vol

                self.dip_mid.append((bid_vwap+ask_vwap)/2)
                self.dip_spread.append(best_ask-best_bid)

                func = ((self.pb_mid[-1]- 1.02869341*self.bag_mid[-1] -1.71316352*self.uku_mid[-1] -2.58489424*self.dip_mid[-1] -13312.578009698685))/126.94804825609309
                if func < -1.5:
                    # if q > 0:
                    #     orders.append(Order(product,best_bid,-math.ceil(q/2)))
                    #     orders.append(Order(product,best_bid,-math.floor(q/2)))
                    orders.append(Order(product,best_bid,-math.ceil((limit+q)/2)))
                    orders.append(Order(product,best_bid,-math.floor((limit+q)/2)))
                if func > 1.5:
                    # if q<0:
                    #     orders.append(Order(product,best_ask,-math.ceil(q/2)))
                    #     orders.append(Order(product,best_ask,-math.floor(q/2)))
                    orders.append(Order(product,best_ask,math.floor((limit-q)/2)))
                    orders.append(Order(product,best_ask,math.ceil((limit-q)/2)))
            
                # if func < 0.2 and func > -0.2: 
                #     if q<0:
                #         orders.append(Order(product,best_ask,-q))
                #     else:
                #         orders.append(Order(product,best_bid,-q))
                result[product] = orders




        return result